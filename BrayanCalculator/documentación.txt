# Flujo de la Aplicaci√≥n "Calculadora de Gastos Personales" 

## Descripci√≥n General
La aplicaci√≥n "Calculadora de Gastos Personales" permite a los usuarios agregar gastos, visualizarlos en una lista y calcular el total acumulado. Est√° desarrollada utilizando HTML, CSS y JavaScript. A continuaci√≥n, se explica el flujo de la aplicaci√≥n paso a paso.

## Flujo de la Aplicaci√≥n

1. üîóCarga de la Interfaz HTML
   - El archivo `calculator.html` define la estructura b√°sica de la p√°gina:
     - Un t√≠tulo principal: "Calculadora de Gastos Personales".
     - Dos campos de entrada (`input`) para la descripci√≥n del gasto y el monto.
     - Dos botones: "Agregar Gasto" y "Calcular Total".
     - Un contenedor para mostrar los gastos agregados.
     - Un contenedor que mostrar√° el total calculado y un mensaje de error si hay alg√∫n problema.

2. üå§Estilizado Futurista con CSS
   - El archivo `calculator.css` agrega un dise√±o moderno con colores oscuros y un fondo animado:
     - Estilo de `body` centrado con fondo futurista.
     - La clase `.container` aplica bordes redondeados, sombra y una animaci√≥n `pulse` para darle dinamismo.
     - Botones con efectos `hover` y transiciones suaves.

3. ü§ñInicializaci√≥n del DOM con JavaScript
   - En el archivo `calculator.js`, se seleccionan elementos HTML mediante `document.getElementById`, como los inputs y botones:
     ```javascript
     const descripcionInput = document.getElementById("descripcion");
     const montoInput = document.getElementById("monto");
     const btnAgregar = document.getElementById("btnAgregar");
     const btnCalcular = document.getElementById("btnCalcular");
     ```

4. ‚ûïAgregar Gastos a la Lista
   - Cuando el usuario hace clic en el bot√≥n "Agregar Gasto":
     1. Se recupera el valor de los inputs `descripcion` y `monto`.
     2. Se verifica si la descripci√≥n est√° vac√≠a o si el monto no es un n√∫mero positivo. Si hay error, se muestra un mensaje.
     3. Si los datos son v√°lidos, se crea un objeto `gasto` con la descripci√≥n y el monto.
     4. El gasto se a√±ade a un arreglo `gastos` y se limpia el formulario.

5. üïäMostrar la Lista de Gastos
   - La funci√≥n `mostrarGastos` recorre el arreglo `gastos` y genera un elemento `div` para cada gasto con esta estructura:
     ```html
     <div class="gasto-item">
         <span>Descripci√≥n - S/ Monto</span>
         <button>Eliminar</button>
     </div>
     ```
   - Cada gasto mostrado tambi√©n tiene un bot√≥n "Eliminar" que llama a la funci√≥n `eliminarGasto`.

6. ‚ùåEliminar un Gasto
   - La funci√≥n `eliminarGasto` elimina el gasto correspondiente del arreglo `gastos` seg√∫n su √≠ndice y actualiza la lista mostrada.

7. üí≥ C√°lculo del Total de Gastos
   - Cuando el usuario hace clic en "Calcular Total":
     - La funci√≥n `calcularTotal` utiliza `reduce` para sumar todos los montos del arreglo `gastos` y mostrar el total en pantalla:
       ```javascript
       totalGastos = gastos.reduce((total, gasto) => total + gasto.monto, 0);
       totalGastosDiv.textContent = `Total de Gastos: S/ ${totalGastos.toFixed(2)}`;
       ```

8. üöÄInteractividad y Dinamismo
   - Los elementos del DOM cambian en tiempo real gracias a la manipulaci√≥n din√°mica con JavaScript.
   - La aplicaci√≥n es fluida y responsiva, lo que mejora la experiencia del usuario.

Conceptos Utilizados
- **Manipulaci√≥n del DOM**: Selecci√≥n de elementos, actualizaci√≥n din√°mica de contenidos.
- **Eventos en JavaScript**: Uso de `addEventListener` para gestionar clics de botones.
- **Arreglos y M√©todos de Arreglo**: Uso de `push`, `forEach`, y `reduce`.
- **Validaci√≥n de Formulario**: Verificaci√≥n de datos ingresados por el usuario.
- **CSS Avanzado**: Animaciones `keyframes`, sombras (`box-shadow`) y transiciones.

Resultado Final
Con esta estructura, la aplicaci√≥n "Calculadora de Gastos Personales" permite al usuario administrar sus gastos de manera f√°cil y visualmente atractiva. ‚ú® 

üéâ